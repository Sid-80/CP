// Using SET data structure it only reducees the iterations than priority queue
class Solution
{
	public:

    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        set<pair<int,int>> s;
        vector<int> dist(V, INT_MAX);
        
        dist[S] = 0;
        s.insert({0, S});

        while (!s.empty())
        {
            auto it = *(s.begin()); //We get the value from the set
            int node = it.second;
            int dis = it.first;
            
            s.erase(it);
            
            for(auto it : adj[node]){
                int adjNode = it[0];
                int edgeWT = it[1];
                
                if(dist[adjNode] > edgeWT + dis){
                    
                    if(dist[adjNode] != INT_MAX){
                        s.erase({dist[adjNode],adjNode});
                    }
                    
                    dist[adjNode] = edgeWT + dis;
                    s.insert({edgeWT + dis, adjNode});
                }
            }
        }
       
        return dist;
    }
};
